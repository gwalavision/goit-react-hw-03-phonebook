{"version":3,"sources":["components/ContactsInput/ContactsInput.jsx","components/ContactsListItem/ContactsListItem.jsx","components/ContactsFinderInput/ContactsFinderInput.jsx","components/ContactsList/ContactsList.jsx","App.js","index.js"],"names":["ContactsInput","title","contacts","setContacts","useState","name","setName","number","setNumber","handleInputChange","e","target","value","className","onSubmit","preventDefault","find","contact","alert","newContact","id","uuid4","prevState","type","required","onChange","defaultProps","ContactsListItem","onDelete","onClick","ContactsFinderInput","ContactsList","filter","map","App","setFilter","useEffect","console","log","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","getContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5d95887.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { v4 as uuid4 } from 'uuid';\r\nimport { useState } from 'react';\r\n\r\nconst ContactsInput = ({ title, contacts, setContacts }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n    name === 'name' ? setName(value) : setNumber(value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const existedContact = contacts.find(contact => contact.name === name);\r\n\r\n    if (existedContact) {\r\n      return alert(`${name} is already in contacts`);\r\n    }\r\n\r\n    const newContact = {\r\n      name,\r\n      id: uuid4(),\r\n      number,\r\n    };\r\n\r\n    setContacts(prevState => [...prevState, newContact]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"header\">{title}</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            required\r\n            value={name}\r\n            onChange={handleInputChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            required\r\n            value={number}\r\n            onChange={handleInputChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </label>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactsInput.defaultProps = {\r\n  value: '',\r\n};\r\n\r\nContactsInput.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactsInput;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ContactsListItem = ({ name, number, id, onDelete }) => {\r\n  return (\r\n    <li className=\"contact-list-item\">\r\n      <span>{name}:</span>\r\n      <span>{number}</span>\r\n      <button type=\"button\" onClick={() => onDelete(id)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactsListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactsListItem;\r\n","const ContactsFinderInput = ({ value, onChange }) => {\r\n  return (\r\n    <form>\r\n      <label>\r\n        Find contacts by name\r\n        <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\r\n      </label>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactsFinderInput;\r\n","import PropTypes from 'prop-types';\r\nimport ContactsListItem from '../ContactsListItem';\r\nimport ContactsFinderInput from '../ContactsFinderInput';\r\n\r\nconst ContactsList = ({ title, contacts, filter, onChange, onDelete }) => {\r\n  return (\r\n    <div>\r\n      <h2 className=\"header\">{title}</h2>\r\n      <ContactsFinderInput value={filter} onChange={onChange} />\r\n      <ul>\r\n        {contacts.map(({ name, id, number }) => (\r\n          <ContactsListItem\r\n            name={name}\r\n            number={number}\r\n            key={id}\r\n            id={id}\r\n            onDelete={onDelete}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nexport default ContactsList;\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport ContactsInput from './components/ContactsInput';\r\nimport ContactsList from './components/ContactsList';\r\n\r\nfunction App() {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  const changeFilter = e => {\r\n    setFilter(e.target.value);\r\n  };\r\n\r\n  const getVisibleContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  const deleteItem = id => {\r\n    setContacts(prevState => [\r\n      ...prevState.filter(contact => contact.id !== id),\r\n    ]);\r\n  };\r\n\r\n  // componentDidMount\r\n  useEffect(() => {\r\n    console.log('mount');\r\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n\r\n    if (parsedContacts) {\r\n      setContacts(parsedContacts);\r\n    }\r\n  }, []);\r\n\r\n  // componentDidUpdate\r\n  useEffect(() => {\r\n    console.log('обновилось поле');\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const getContacts = getVisibleContacts();\r\n\r\n  return (\r\n    <>\r\n      <ContactsInput\r\n        title=\"Phonebook\"\r\n        contacts={contacts}\r\n        setContacts={setContacts}\r\n      />\r\n      <ContactsList\r\n        title=\"Contacts\"\r\n        contacts={getContacts}\r\n        filter={filter}\r\n        onChange={changeFilter}\r\n        onDelete={deleteItem}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}